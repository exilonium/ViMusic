# .github/workflows/fdroid-nightly.yml
name: F-Droid Nightly Build

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/fdroid' # Only run when on fdroid branch
    
    steps:
    - name: Checkout fdroid branch
      uses: actions/checkout@v4
      with:
        ref: fdroid
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Fetch main branch
      run: |
        git remote add upstream ${{ github.server_url }}/${{ github.repository }}.git
        git fetch upstream main

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Get latest commit from main
      id: main_commit
      run: |
        MAIN_COMMIT=$(git rev-parse upstream/main)
        MAIN_SHORT=$(git rev-parse --short upstream/main)
        echo "commit=$MAIN_COMMIT" >> $GITHUB_OUTPUT
        echo "short=$MAIN_SHORT" >> $GITHUB_OUTPUT
        echo "Latest main commit: $MAIN_COMMIT"

    - name: Checkout main branch code
      run: |
        # Create a temporary directory for main branch code
        mkdir -p /tmp/main-code
        git --git-dir=.git --work-tree=/tmp/main-code checkout upstream/main -- .
        
        # Copy main branch code to current directory (excluding fdroid specific files)
        rsync -av --exclude='.git/' --exclude='fdroid/' --exclude='metadata/' /tmp/main-code/ ./app-src/
        
    - name: Generate version info
      id: version
      run: |
        DATE=$(date +%Y%m%d)
        COMMIT_SHORT=${{ steps.main_commit.outputs.short }}
        VERSION_NAME="nightly-${DATE}-${COMMIT_SHORT}"
        VERSION_CODE=$(date +%s)
        
        echo "name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "code=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION_NAME ($VERSION_CODE)"

    - name: Update app version
      run: |
        # Update version in build.gradle or build.gradle.kts
        if [ -f "app-src/app/build.gradle" ]; then
          sed -i "s/versionCode .*/versionCode ${{ steps.version.outputs.code }}/" app-src/app/build.gradle
          sed -i "s/versionName .*/versionName \"${{ steps.version.outputs.name }}\"/" app-src/app/build.gradle
        elif [ -f "app-src/app/build.gradle.kts" ]; then
          sed -i "s/versionCode = .*/versionCode = ${{ steps.version.outputs.code }}/" app-src/app/build.gradle.kts
          sed -i "s/versionName = .*/versionName = \"${{ steps.version.outputs.name }}\"/" app-src/app/build.gradle.kts
        fi

    - name: Make gradlew executable
      run: chmod +x app-src/gradlew

    - name: Build APK
      working-directory: ./app-src
      run: |
        ./gradlew assembleRelease --no-daemon --stacktrace
        
    - name: Sign APK (if keystore available)
      working-directory: ./app-src
      if: ${{ secrets.KEYSTORE_BASE64 && secrets.KEYSTORE_PASSWORD }}
      run: |
        # Decode keystore
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > release.keystore
        
        # Sign APK
        $ANDROID_HOME/build-tools/*/apksigner sign \
          --ks release.keystore \
          --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
          --key-pass pass:${{ secrets.KEY_PASSWORD || secrets.KEYSTORE_PASSWORD }} \
          --ks-key-alias ${{ secrets.KEY_ALIAS || 'release' }} \
          app/build/outputs/apk/release/app-release.apk

    - name: Setup F-Droid server
      run: |
        # Install F-Droid server if not present
        if [ ! -f "fdroidserver/fdroid" ]; then
          sudo apt-get update
          sudo apt-get install -y fdroidserver
        fi
        
        # Initialize F-Droid repo if not exists
        if [ ! -f "config.yml" ]; then
          fdroid init --verbose
        fi

    - name: Copy APK to F-Droid repo
      run: |
        # Create repo directory if it doesn't exist
        mkdir -p repo
        
        # Copy the built APK
        cp app-src/app/build/outputs/apk/release/app-release.apk \
           repo/app-${{ steps.version.outputs.name }}.apk

    - name: Update F-Droid metadata
      run: |
        # Create metadata directory if it doesn't exist
        mkdir -p metadata
        
        # Create or update metadata file (adjust package name as needed)
        PACKAGE_NAME="com.yourpackage.app" # Update this with your actual package name
        
        cat > metadata/${PACKAGE_NAME}.yml << EOF
        Categories:
          - Development
        License: GPL-3.0-or-later
        WebSite: https://github.com/${{ github.repository }}
        SourceCode: https://github.com/${{ github.repository }}
        IssueTracker: https://github.com/${{ github.repository }}/issues
        
        AutoName: Your App Name
        Description: |
          Nightly build of Your App Name
          
          Built from commit: ${{ steps.main_commit.outputs.commit }}
        
        Builds:
          - versionName: ${{ steps.version.outputs.name }}
            versionCode: ${{ steps.version.outputs.code }}
            commit: ${{ steps.main_commit.outputs.commit }}
            gradle:
              - yes
        EOF

    - name: Update F-Droid repository
      run: |
        # Update the repository
        fdroid update --verbose
        
        # Generate index
        fdroid deploy --verbose

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add .
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Add nightly build ${{ steps.version.outputs.name }} from main@${{ steps.main_commit.outputs.short }}"
          git push origin fdroid
        fi

    - name: Create release (optional)
      uses: softprops/action-gh-release@v1
      if: success()
      with:
        tag_name: nightly-${{ steps.version.outputs.name }}
        name: Nightly Build ${{ steps.version.outputs.name }}
        body: |
          Nightly build from main branch
          
          **Source Commit:** ${{ steps.main_commit.outputs.commit }}
          **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          This is an automated nightly build. Use at your own risk.
        files: |
          app-src/app/build/outputs/apk/release/app-release.apk
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
